[project]
name = "python-ulid-django"
version = "1.0.1"
description = "ULID (Universally Unique Lexicographically Sortable Identifier) support for Django."
authors = [
    { name = "Xdynix", email = "Lizard.rar@gmail.com" },
]
dependencies = [
    "django>=4.2.0",
    "python-ulid<3.0.0,>=2.6.0",
]
requires-python = ">=3.10"
readme = "README.md"
license = { text = "MIT" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Django",
    "Framework :: Django :: 4",
    "Framework :: Django :: 4.1",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://github.com/Xdynix/python-ulid-django"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
lint = [
    "pre-commit>=3.7.1",
    "mypy~=1.10.0",
    "django-stubs[compatible-mypy]~=5.0.0",
]
test = [
    "pytest>=8.2.2",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-django>=4.8.0",
]

[tool.pdm.scripts.post_install]
cmd = ["pre-commit", "install"]
help = "install pre-commit hooks"

[tool.pdm.scripts.lint]
cmd = ["pre-commit", "run", "--all-files"]
env = { PYTHONUTF8 = "1" }
help = "execute linters"

[tool.pdm.scripts.test]
cmd = ["pytest", "--cov", "ulid_django"]
help = "execute test cases"

[tool.ruff]
cache-dir = ".cache/ruff"
target-version = "py310"

[tool.ruff.lint]
select = [
    "F", # Pyflakes
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "I", # isort
    "UP", # pyupgrade
    "S", # flake8-bandit
    "B", # flake8-bugbear
    "C", # flake8-comprehensions
    "DJ", # flake8-django
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "FURB", # refurb
    "RUF", # Ruff-specific rules
]
ignore = [
    # Suppressed by ruff formatter.
    "W191", # tab-indentation
    "E111", # indentation-with-invalid-multiple
    "E114", # indentation-with-invalid-multiple-comment
    "E117", # over-indented
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "S101", # assert
]

[tool.mypy]
strict = true
cache_dir = ".cache/mypy"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.settings"
testpaths = "tests"
pythonpath = [".", "src"]
cache_dir = ".cache/pytest"
addopts = [
    "--import-mode", "importlib",
    "--cov-config", "pyproject.toml",
    "--cov-report", "term",
    "--cov-report", "html",
    "--cov-fail-under", "100",
]

[tool.coverage.run]
branch = true
data_file = ".cache/coverage/data.db"
disable_warnings = ["no-data-collected"]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
]

[tool.coverage.html]
directory = ".cache/cov-report"
